#include <stdio.h>
#include <stdlib.h>
#include "ev3.h"
#include "ev3_port.h"
#include "ev3_tacho.h"
#ifndef MOVE_FUNC
#define MOVE_FUNC
#include "moveFunctions.h"
#endif
#ifndef READ_FUNC
#define READ_FUNC
#include "readFunctions.h"
#endif

uint8_t motor[ 3 ] = { DESC_LIMIT, DESC_LIMIT, DESC_LIMIT };  /* Sequence numbers of motors */

// WIN32 /////////////////////////////////////////
#ifdef __WIN32__

#include <windows.h>

// UNIX //////////////////////////////////////////
#else

#include <unistd.h>
#define Sleep( msec ) usleep(( msec ) * 1000 )

//////////////////////////////////////////////////
#endif




#ifndef INITIALIZE
#define INITIALIZE
#include "defines.h"
#endif
extern const char const *color[];
extern int max_speed;
extern int speed;
extern float x_position, y_position;
extern int COLOR_VAL;
extern float INTENSITY_VAL;
extern bool TOUCHED;
extern float US_VAL;
extern float ANG_VAL;




/* Movement functions
*/
void run_forever( int l_speed, int r_speed )
{
printf("run forever");
int left_speed = l_speed; /**max_speed/100;*/
int right_speed = r_speed; /**max_speed/100;*/
set_tacho_speed_sp( motor[ L ], left_speed );
set_tacho_speed_sp( motor[ R ], right_speed);
multi_set_tacho_command_inx( motor, TACHO_RUN_FOREVER );
}

void run_to_rel_pos(int l_speed,int l_pos,int r_speed,int r_pos)
{
int left_speed = l_speed *max_speed/100;
int right_speed = r_speed *max_speed/100;
set_tacho_speed_sp( motor[ L ], l_speed );
set_tacho_speed_sp( motor[ R ], r_speed );
set_tacho_position_sp( motor[ L ], l_pos );
set_tacho_position_sp( motor[ R ], r_pos );
multi_set_tacho_command_inx( motor, TACHO_RUN_TO_REL_POS );    set_tacho_speed_sp( motor[ L ], l_speed );
}


void run_timed( int l_speed, int r_speed, int ms )
{
int left_speed = l_speed *max_speed/100;
int right_speed = r_speed *max_speed/100;
set_tacho_speed_sp( motor[ L ], l_speed );
set_tacho_speed_sp( motor[ R ], r_speed );
multi_set_tacho_time_sp( motor, ms );
multi_set_tacho_command_inx( motor, TACHO_RUN_TIMED );
}


int is_running( void )
{
FLAGS_T state = TACHO_STATE__NONE_;
get_tacho_state_flags( motor[ L ], &state );
if ( state != TACHO_STATE__NONE_ ) return ( 1 );
get_tacho_state_flags( motor[ R ], &state );
if ( state != TACHO_STATE__NONE_ ) return ( 1 );
return ( 0 );
}

void stop_car( void )
{
multi_set_tacho_command_inx( motor,TACHO_STOP);
}

void rotate_car(int angle, char D, int speed_circular) 
{
if (angle<0)
	angle=-angle;
if(D=='R')
    run_to_rel_pos( speed_circular, DEGREE_TO_COUNT( +angle ) , speed_circular, DEGREE_TO_COUNT( -angle ));
	printf("ANG_VAL = %f5.2",ANG_VAL);

if(D=='L')
    run_to_rel_pos( speed_circular, DEGREE_TO_COUNT( -angle ) , speed_circular, DEGREE_TO_COUNT( +angle ));
while(is_running());
}

void rotate_car2(int angle,char D,int speed_circular){
	/*written by J.D.*/
	if(angle<0)
		angle=-angle;
	ANG_VAL=read_ang();
	float start_angle1=ANG_VAL;
	rotate_car(angle/4, D, speed_circular);
	ANG_VAL=read_ang();	
	angle=angle-abs(ANG_VAL-start_angle1);
	int angle_unit=3;

	ANG_VAL=read_ang();
	float start_angle=ANG_VAL;
	float new_angle=ANG_VAL;
	//while the rotation we made is not equal to the asked angle+-3 degrees
	while(abs(new_angle-start_angle) > angle +3 || abs(new_angle-start_angle) < angle -3 ) {
		if(D=='R'){

	    		run_to_rel_pos( speed_circular, DEGREE_TO_COUNT( +angle_unit ), speed_circular, DEGREE_TO_COUNT( -angle_unit ));
		}

		if(D=='L'){
	    		run_to_rel_pos( speed_circular, DEGREE_TO_COUNT( -angle_unit ), speed_circular, DEGREE_TO_COUNT( +angle_unit ));
		}
		ANG_VAL=read_ang();
		new_angle=ANG_VAL;
	}

	
}



int init_motors()
{
ev3_tacho_init();
if(ev3_search_tacho_plugged_in( L_MOTOR_PORT,L_MOTOR_EXT_PORT, motor + L , 0))
{
	get_tacho_max_speed(motor[L],&max_speed);
        printf("max speed is %d \n", max_speed);
	set_tacho_command_inx(motor[L],TACHO_RESET);
	printf("Left Motor Done ! \n");
} else {
	printf("L NOT Found\n");
	return ( 1 );
}
if(ev3_search_tacho_plugged_in( R_MOTOR_PORT,R_MOTOR_EXT_PORT, motor + R,0))
{
	get_tacho_max_speed(motor[R],&max_speed);
        printf("max speed is %d \n", max_speed);
	set_tacho_command_inx(motor[R],TACHO_RESET);
	printf("Right Motor Done! \n");
} else {
	printf("R NOT Found\n");
	return ( 1 );
}
if(ev3_search_tacho_plugged_in( S_MOTOR_PORT, S_MOTOR_EXT_PORT, motor + S,0))
{
        get_tacho_max_speed(motor[S],&max_speed);
        printf("max speed is %d \n", max_speed);
        set_tacho_command_inx(motor[S],TACHO_RESET);
        printf("Servo Motor Done! \n");
} else {
        printf("S NOT Found\n");
        return ( 1 );
}


printf("Initialisation complete ! Have fun ;-) \n");
return ( 0 );
}

void moveinf(int speed,char D){
	//printf("moveinf before update\n");
	update_sensors_value();
	//printf("moveinf after update\n");
	if(detect_obstacle())
	{
		stop_car();
	return;
	}
	if(D=='F') run_forever(speed,speed);
	if(D=='B') run_forever(-speed,-speed);
	while(1){
        	update_sensors_value();     
		//printf("still in while");
		if(detect_obstacle())
        	{
                	stop_car();
                	break;
        	}
        	Sleep(200);
	}
	return;
}

int move(int speed, int time, int inf, char D){
        /*written by J.D.*/
	if(inf==1){

                moveinf(speed, D);
                return 1;
        }
        else {
		printf("start\n");
                int time_elapsed=0;
                int partialTime= 1000 ; //1s
                while(time_elapsed < time){
                        update_sensors_value();
                        if(detect_obstacle()){
                                return 1;
                        }
                        if(D=='F') run_timed(speed, speed, partialTime);
                        if(D=='B') run_timed(-speed, -speed, partialTime);
                        time_elapsed=time_elapsed + partialTime;

                }
                return 0;

        }
}

int opened_servo=0;
int ball_catched=1;

void open_servo()
{
	set_tacho_speed_sp(motor[S], S_OPENING_SPEED);
	set_tacho_position_sp(motor[S], DEGREE_TO_COUNT(S_OPENING_ANGLE));
	set_tacho_command_inx(motor[S], S_OPENING_TIME);
	opened_servo = 1;
	ball_catched = 0;
}

void catch_object()
{
	run_timed(-SPEED_LINEAR,-SPEED_LINEAR,1000);
	Sleep(1000);
	rotate_car2(180, 'R', SPEED_CIRCULAR);
	run_timed(SPEED_LINEAR, SPEED_LINEAR, 500);
	if (opened_servo==0) {
		open_servo();
		Sleep(1000);
	}
	close_servo();
	opened_servo = 0;
	ball_catched = 1;
}

void close_servo()
{
	set_tacho_speed_sp(motor[S], S_OPENING_SPEED);
	set_tacho_position_sp(motor[S], -DEGREE_TO_COUNT(S_OPENING_ANGLE));
	set_tacho_command_inx(motor[S], S_OPENING_TIME);
	opened_servo = 0;
}
