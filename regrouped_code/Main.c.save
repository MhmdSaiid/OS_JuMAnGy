#include <stdio.h>                                                                            
#include <stdlib.h>                                                                           
#include <string.h>                                                                           
#include "ev3.h"                                                                              
#include "ev3_port.h"
#include "ev3_sensor.h"
#include "ev3_tacho.h"
// WIN32 /////////////////////////////////////////
#ifdef __WIN32__

#include <windows.h>

// UNIX //////////////////////////////////////////
#else
#include <unistd.h>
#define Sleep( msec ) usleep(( msec ) * 1000 )

//////////////////////////////////////////////////
#endif
#ifndef DETECT_FUNC
#define DETECT_FUNC
#include "detect_disting_functions.h"
#endif
#ifndef MOVE_FUNC
#define MOVE_FUNC
#include "moveFunctions.h"
#endif
#ifndef READ_FUNC
#define READ_FUNC
#include "readFunctions.h"
#endif

#ifndef INITIALIZE
#define INITIALIZE
#define Sleep( msec ) usleep(( msec ) * 1000 )

#define COLOR_COUNT  (( int )( sizeof( color ) / sizeof( color[ 0 ])))

#define L_MOTOR_PORT    65 //Port A
#define L_MOTOR_EXT_PORT  EXT_PORT__NONE_
#define R_MOTOR_PORT    66 //Port B
#define R_MOTOR_EXT_PORT EXT_PORT__NONE_
#define SPEED_LINEAR    30  //for linear motion
#define SPEED_CIRCULAR  50  //for circular motion
ne DEGREE_TO_COUNT( d )  (( d ) * 260 / 90 )

#endif
//enum{ L,R };
//uint8_t motor[ 3 ] = { DESC_LIMIT, DESC_LIMIT, DESC_LIMIT };  /* Sequence numbers of motors */

extern const char const *color[];
extern uint8_t motor[ 3 ];

//typedef enum obstacle_type obstacle_type;
//enum obstacle_type {ROBOT, UNMOVABLE, MOVABLE, BOUNDARIES, NONE};

int max_speed;  /* Motor maximal speed */

float x_position, y_position;
char COLOR_VAL;
float INTENSITY_VAL;
bool TOUCHED;
float US_VAL;
float ANG_VAL;
//const char const *color[] = { "?", "BLACK", "BLUE", "GREEN", "YELLOW", "RED", "WHITE", "BROWN" };




int main (void )
{
    uint8_t sn_touch;
    int detected_obstacle;
    char Direct ='F';
	max_speed=1050;
    int speed = max_speed*SPEED_LINEAR/100;
    printf( "Waiting the EV3 brick online...\n" );
    if ( ev3_init() < 1 )
		return ( 1 );
    printf( "*** ( EV3 ) Hello! ***\n" );
    ev3_sensor_init();
	ev3_tacho_init();
        if(ev3_search_tacho_plugged_in( L_MOTOR_PORT,L_MOTOR_EXT_PORT,motor+L,0))
        {
                get_tacho_max_speed(motor[L],&max_speed);
                set_tacho_command_inx(motor[L],TACHO_RESET);
        } else {
                printf("L NOT Found");
                return (0);
        }
        if(ev3_search_tacho_plugged_in( R_MOTOR_PORT,R_MOTOR_EXT_PORT,motor+R,0))
        {
                set_tacho_command_inx(motor[R],TACHO_RESET);
        } else {
                printf("R NOT Found");
                return (0);
        }
	printf("start2\n");
    //rotate_car2(180,'R', SPEED_CIRCULAR);
	//sleep(1);
    /*move(speed, 10000, 0,'F');
	sleep(1);
    rotate_car2(90,'L', SPEED_CIRCULAR);
	sleep(10);*/
    moveinf(speed,Direct);
    printf("Robot stopped because there is an obstacle\n");
	obstacle_type obst = distinguish_obstacle();
	printf("next\n");        
	//printf("%d",obst);
    TOUCHED = _check_pressed( sn_touch);
    if( TOUCHED )
    {
            printf("*** ( EV3 ) Bye! ***\n");
    }
    Sleep(400);

	return 1;
}
